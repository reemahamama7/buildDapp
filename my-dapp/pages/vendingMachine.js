import Head from "next/head";
import { useState, useEffect } from "react";
import Web3 from "web3";
import { ethers } from "ethers";

import React from "react";
import "abortcontroller-polyfill/dist/abortcontroller-polyfill-only";
import vmContract from "../blockchain/vending";
import "bulma/css/bulma.css";
import styles from "../styles/vending.module.css";

const VendingMachine = () => {
  const [errorMessage, setErrorMessage] = useState(null);
  const [defaultAccount, setDefaultAccount] = useState(null);
  const [userBalance, setUserBalance] = useState(null);
  const [error, setError] = useState("");
  const [inventory, setInventory] = useState("");
  const [myDonutCount, setmyDonutCount] = useState("");

  let web3;
  useEffect(() => {
    getInventoryHandler();
  });
  const getInventoryHandler = async () => {
    const inventory = await vmContract.methods.getVendingMachineBalance().call();
    setInventory(inventory);
  };
  const getMydonutCountHandler = async () => {
    const accounts = await web3.eth.getAccounts();
    const count = await vmContract.methods.donutBalances(accounts[0]).call();
    setmyDonutCount(count);
  };
  // const coonnectWalletHandler = async () => {
  //   if (typeof window !== "undefined" && typeof window.ethereum !== "undefined") {
  //     try {
  //       await Window.ethereum.request({ method: "eth_requestAccounts" });
  //       web3 = new Web3(window.ethereum);
  //     } catch (err) {
  //       setError(err.message);
  //     }
  //   } else {
  //     console.log("please");
  //   }
  // };
  const resetFileInput = () => {
    // resetting the input value

    {
      address = null;
    }
  };
  const accountChangedHandler = async (newAccount) => {
    const address = await newAccount.getAddress();
    setDefaultAccount(address);
    const balance = await newAccount.getBalance();
    setUserBalance(ethers.utils.formatEther(balance));
    await getuserBalance(address);
  };
  const getuserBalance = async (address) => {
    const balance = await provider.getBalance(address, "latest");
  };
  return (
    <div className={styles.main}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by Dapp" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="">
        <h1> Get started with my first app</h1>
      </div>
      {/* <nav className="navbar mt-4 mb-4 "> */}
      <div className="container">
        {/* <div className="">
            <h1> strat with first my Application</h1>
          </div> */}
        <input className="container input box" placeholder="Please enter your name"></input>
        <div className="">
          <button
            onClick={async () => {
              if (window.ethereum) {
                new ethers.providers.Web3Provider(window.ethereum).send("eth_requestAccounts", []).then(async () => {
                  await accountChangedHandler(new ethers.providers.Web3Provider(window.ethereum).getSigner());

                  getMydonutCountHandler();
                });
              } else {
                setErrorMessage("Please Install Metamask!!!");
              }
            }}
            className="button is-primary"
          >
            connect wallet
          </button>
        </div>
      </div>
      {/* </nav> */}
      {/* <section className="container ">
        <h2>vending machine inventory: {inventory}</h2>
      </section>
      <section className="container">
        <h2>My donut: {myDonutCount}</h2>
      </section> */}
      <div className="displayAccount">
        <h4 className="walletAddress">Address:{defaultAccount}</h4>
        <div className="balanceDisplay">
          <h3>Wallet Amount: {userBalance}</h3>
        </div>
      </div>
      {errorMessage}
      <section className="container has-text-danger">{error}</section>
      <button onClick={resetFileInput} className="button is-primary ">
        disconnect
      </button>
    </div>
  );
};

export default VendingMachine;
